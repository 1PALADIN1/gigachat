// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	reflect "reflect"

	entity "github.com/1PALADIN1/gigachat_server/internal/entity"
	service "github.com/1PALADIN1/gigachat_server/internal/service"
	gomock "github.com/golang/mock/gomock"
	websocket "github.com/gorilla/websocket"
)

// MockAuthorization is a mock of Authorization interface.
type MockAuthorization struct {
	ctrl     *gomock.Controller
	recorder *MockAuthorizationMockRecorder
}

// MockAuthorizationMockRecorder is the mock recorder for MockAuthorization.
type MockAuthorizationMockRecorder struct {
	mock *MockAuthorization
}

// NewMockAuthorization creates a new mock instance.
func NewMockAuthorization(ctrl *gomock.Controller) *MockAuthorization {
	mock := &MockAuthorization{ctrl: ctrl}
	mock.recorder = &MockAuthorizationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthorization) EXPECT() *MockAuthorizationMockRecorder {
	return m.recorder
}

// GenerateToken mocks base method.
func (m *MockAuthorization) GenerateToken(username, password string) (string, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateToken", username, password)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GenerateToken indicates an expected call of GenerateToken.
func (mr *MockAuthorizationMockRecorder) GenerateToken(username, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateToken", reflect.TypeOf((*MockAuthorization)(nil).GenerateToken), username, password)
}

// ParseToken mocks base method.
func (m *MockAuthorization) ParseToken(token string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseToken", token)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseToken indicates an expected call of ParseToken.
func (mr *MockAuthorizationMockRecorder) ParseToken(token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseToken", reflect.TypeOf((*MockAuthorization)(nil).ParseToken), token)
}

// SignUpUser mocks base method.
func (m *MockAuthorization) SignUpUser(user entity.User) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignUpUser", user)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignUpUser indicates an expected call of SignUpUser.
func (mr *MockAuthorizationMockRecorder) SignUpUser(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignUpUser", reflect.TypeOf((*MockAuthorization)(nil).SignUpUser), user)
}

// MockUser is a mock of User interface.
type MockUser struct {
	ctrl     *gomock.Controller
	recorder *MockUserMockRecorder
}

// MockUserMockRecorder is the mock recorder for MockUser.
type MockUserMockRecorder struct {
	mock *MockUser
}

// NewMockUser creates a new mock instance.
func NewMockUser(ctrl *gomock.Controller) *MockUser {
	mock := &MockUser{ctrl: ctrl}
	mock.recorder = &MockUserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUser) EXPECT() *MockUserMockRecorder {
	return m.recorder
}

// FindUserByName mocks base method.
func (m *MockUser) FindUserByName(filter string, currentUserId int) ([]entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUserByName", filter, currentUserId)
	ret0, _ := ret[0].([]entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUserByName indicates an expected call of FindUserByName.
func (mr *MockUserMockRecorder) FindUserByName(filter, currentUserId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUserByName", reflect.TypeOf((*MockUser)(nil).FindUserByName), filter, currentUserId)
}

// GetUserById mocks base method.
func (m *MockUser) GetUserById(id int) (entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserById", id)
	ret0, _ := ret[0].(entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserById indicates an expected call of GetUserById.
func (mr *MockUserMockRecorder) GetUserById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserById", reflect.TypeOf((*MockUser)(nil).GetUserById), id)
}

// MockChat is a mock of Chat interface.
type MockChat struct {
	ctrl     *gomock.Controller
	recorder *MockChatMockRecorder
}

// MockChatMockRecorder is the mock recorder for MockChat.
type MockChatMockRecorder struct {
	mock *MockChat
}

// NewMockChat creates a new mock instance.
func NewMockChat(ctrl *gomock.Controller) *MockChat {
	mock := &MockChat{ctrl: ctrl}
	mock.recorder = &MockChatMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChat) EXPECT() *MockChatMockRecorder {
	return m.recorder
}

// GetAllChats mocks base method.
func (m *MockChat) GetAllChats(userId int) ([]entity.ChatResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllChats", userId)
	ret0, _ := ret[0].([]entity.ChatResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllChats indicates an expected call of GetAllChats.
func (mr *MockChatMockRecorder) GetAllChats(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllChats", reflect.TypeOf((*MockChat)(nil).GetAllChats), userId)
}

// GetOrCreateChat mocks base method.
func (m *MockChat) GetOrCreateChat(chat entity.Chat) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrCreateChat", chat)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrCreateChat indicates an expected call of GetOrCreateChat.
func (mr *MockChatMockRecorder) GetOrCreateChat(chat interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrCreateChat", reflect.TypeOf((*MockChat)(nil).GetOrCreateChat), chat)
}

// MockMessage is a mock of Message interface.
type MockMessage struct {
	ctrl     *gomock.Controller
	recorder *MockMessageMockRecorder
}

// MockMessageMockRecorder is the mock recorder for MockMessage.
type MockMessageMockRecorder struct {
	mock *MockMessage
}

// NewMockMessage creates a new mock instance.
func NewMockMessage(ctrl *gomock.Controller) *MockMessage {
	mock := &MockMessage{ctrl: ctrl}
	mock.recorder = &MockMessageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessage) EXPECT() *MockMessageMockRecorder {
	return m.recorder
}

// AddMessageToChat mocks base method.
func (m *MockMessage) AddMessageToChat(userId, chatId int, message string) (entity.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddMessageToChat", userId, chatId, message)
	ret0, _ := ret[0].(entity.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddMessageToChat indicates an expected call of AddMessageToChat.
func (mr *MockMessageMockRecorder) AddMessageToChat(userId, chatId, message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMessageToChat", reflect.TypeOf((*MockMessage)(nil).AddMessageToChat), userId, chatId, message)
}

// GetAllMessages mocks base method.
func (m *MockMessage) GetAllMessages(chatId int) ([]entity.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllMessages", chatId)
	ret0, _ := ret[0].([]entity.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllMessages indicates an expected call of GetAllMessages.
func (mr *MockMessageMockRecorder) GetAllMessages(chatId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllMessages", reflect.TypeOf((*MockMessage)(nil).GetAllMessages), chatId)
}

// MockUserConnection is a mock of UserConnection interface.
type MockUserConnection struct {
	ctrl     *gomock.Controller
	recorder *MockUserConnectionMockRecorder
}

// MockUserConnectionMockRecorder is the mock recorder for MockUserConnection.
type MockUserConnectionMockRecorder struct {
	mock *MockUserConnection
}

// NewMockUserConnection creates a new mock instance.
func NewMockUserConnection(ctrl *gomock.Controller) *MockUserConnection {
	mock := &MockUserConnection{ctrl: ctrl}
	mock.recorder = &MockUserConnectionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserConnection) EXPECT() *MockUserConnectionMockRecorder {
	return m.recorder
}

// AddUserInActiveList mocks base method.
func (m *MockUserConnection) AddUserInActiveList(userId int, connection *websocket.Conn) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddUserInActiveList", userId, connection)
}

// AddUserInActiveList indicates an expected call of AddUserInActiveList.
func (mr *MockUserConnectionMockRecorder) AddUserInActiveList(userId, connection interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUserInActiveList", reflect.TypeOf((*MockUserConnection)(nil).AddUserInActiveList), userId, connection)
}

// CloseAllConnections mocks base method.
func (m *MockUserConnection) CloseAllConnections() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CloseAllConnections")
}

// CloseAllConnections indicates an expected call of CloseAllConnections.
func (mr *MockUserConnectionMockRecorder) CloseAllConnections() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseAllConnections", reflect.TypeOf((*MockUserConnection)(nil).CloseAllConnections))
}

// NotifyActiveUsers mocks base method.
func (m *MockUserConnection) NotifyActiveUsers(notification service.NotificationMessage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NotifyActiveUsers", notification)
	ret0, _ := ret[0].(error)
	return ret0
}

// NotifyActiveUsers indicates an expected call of NotifyActiveUsers.
func (mr *MockUserConnectionMockRecorder) NotifyActiveUsers(notification interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotifyActiveUsers", reflect.TypeOf((*MockUserConnection)(nil).NotifyActiveUsers), notification)
}

// RemoveUserFromActiveList mocks base method.
func (m *MockUserConnection) RemoveUserFromActiveList(userId int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RemoveUserFromActiveList", userId)
}

// RemoveUserFromActiveList indicates an expected call of RemoveUserFromActiveList.
func (mr *MockUserConnectionMockRecorder) RemoveUserFromActiveList(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveUserFromActiveList", reflect.TypeOf((*MockUserConnection)(nil).RemoveUserFromActiveList), userId)
}

// MockNotification is a mock of Notification interface.
type MockNotification struct {
	ctrl     *gomock.Controller
	recorder *MockNotificationMockRecorder
}

// MockNotificationMockRecorder is the mock recorder for MockNotification.
type MockNotificationMockRecorder struct {
	mock *MockNotification
}

// NewMockNotification creates a new mock instance.
func NewMockNotification(ctrl *gomock.Controller) *MockNotification {
	mock := &MockNotification{ctrl: ctrl}
	mock.recorder = &MockNotificationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNotification) EXPECT() *MockNotificationMockRecorder {
	return m.recorder
}

// NewMessageNotification mocks base method.
func (m *MockNotification) NewMessageNotification(messageType int, message entity.ResponseMessage) (service.NotificationMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewMessageNotification", messageType, message)
	ret0, _ := ret[0].(service.NotificationMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewMessageNotification indicates an expected call of NewMessageNotification.
func (mr *MockNotificationMockRecorder) NewMessageNotification(messageType, message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewMessageNotification", reflect.TypeOf((*MockNotification)(nil).NewMessageNotification), messageType, message)
}
